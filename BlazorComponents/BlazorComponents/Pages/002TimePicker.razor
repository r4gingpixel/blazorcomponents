@page "/timePicker"
@using System.Timers;
<div>
	<h3>_002TimePicker</h3>


	<div class="clockContainer" >
		
		<img src="/images/clockMinutes.png" alt="minutes" style="transform:rotate(@minutesRotation);"/>
		<img src="/images/clockHours.png" alt="hours" style="transform:rotate(@hoursRotation);"/>
		<img src="/images/clockSeconds.png" alt="hours" style="transform:rotate(@secondsRotation);"/>
		<img src="/images/clockBg.png" alt="bg" @onclick="GetTime"/>
	</div>
	<input type="text" @bind-value="hh"/><input type="text" @bind-value="MM"/>
</div>
@code {

	public int hh { get; set; } = DateTime.Now.Hour;
	public int MM { get; set; } = DateTime.Now.Minute;


	public void GetTime (MouseEventArgs e)
	{
		var angle = Math.Atan2(height * 0.5f - e.OffsetY, width * 0.5f - e.OffsetX);

		angle -= Math.PI * 0.5f;

		while (angle < 0)
		{
			angle += Math.PI * 2;
		}
		while (angle > Math.PI * 2)
		{
			angle -= Math.PI * 2;
		}
		var time = angle / (Math.PI / 6f);
		hh = (int) Math.Floor(time);
		MM = (int)((time - hh) * 60f);
		if (hh == 0) hh = 12;
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		System.Timers.Timer _timer = new(100);
		_timer.AutoReset = true;

		void NotifyTimerElapsed(Object? source, ElapsedEventArgs e)
		{	
			StateHasChanged();
        }
		_timer.Elapsed += NotifyTimerElapsed;
        _timer.Enabled = true;
		base.OnInitialized();
	}

	public int width { get; init; } = 300;
	public int height { get; init; } = 300;
	public string hoursRotation => (int)(((Math.PI / 6) * ((DateTime.Now.Minute/60f + DateTime.Now.Hour)%12)) / Math.PI * 180) +"deg";
	public string minutesRotation => (int)(((Math.PI / 30) * (DateTime.Now.Minute + DateTime.Now.Second/60f)) / Math.PI * 180) +"deg";
	public string secondsRotation => (int)(((Math.PI / 30) * ((float)DateTime.Now.Second + DateTime.Now.Millisecond/1000f)) / Math.PI * 180) +"deg";

}
